{
  "_args": [
    [
      {
        "raw": "draft-convert@^2.0.0",
        "scope": null,
        "escapedName": "draft-convert",
        "name": "draft-convert",
        "rawSpec": "^2.0.0",
        "spec": ">=2.0.0 <3.0.0",
        "type": "range"
      },
      "/Users/dom4j/myWorkSpace/make-redux/node_modules/braft-editor"
    ]
  ],
  "_from": "draft-convert@^2.0.0",
  "_hasShrinkwrap": false,
  "_id": "draft-convert@2.1.4",
  "_location": "/draft-convert",
  "_nodeVersion": "6.9.4",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/draft-convert_2.1.4_1532977024924_0.6313445230278965"
  },
  "_npmUser": {
    "name": "bbriggs",
    "email": "ben.s.briggs@gmail.com"
  },
  "_npmVersion": "3.10.10",
  "_phantomChildren": {},
  "_requested": {
    "raw": "draft-convert@^2.0.0",
    "scope": null,
    "escapedName": "draft-convert",
    "name": "draft-convert",
    "rawSpec": "^2.0.0",
    "spec": ">=2.0.0 <3.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/braft-convert",
    "/braft-editor"
  ],
  "_resolved": "https://registry.npmjs.org/draft-convert/-/draft-convert-2.1.4.tgz",
  "_shasum": "b8817000eaf251e95583c987adda085d67254a0d",
  "_shrinkwrap": null,
  "_spec": "draft-convert@^2.0.0",
  "_where": "/Users/dom4j/myWorkSpace/make-redux/node_modules/braft-editor",
  "author": {
    "name": "bbriggs@hubspot.com"
  },
  "bugs": {
    "url": "https://github.com/HubSpot/draft-convert/issues"
  },
  "dependencies": {
    "immutable": "~3.7.4",
    "invariant": "^2.2.1"
  },
  "description": "Extensibly serialize & deserialize Draft.js ContentState",
  "devDependencies": {
    "babel-cli": "^6.10.1",
    "babel-core": "^6.7.7",
    "babel-eslint": "^7.1.1",
    "babel-jest": "^18.0.0",
    "babel-loader": "^6.2.4",
    "babel-preset-es2015": "^6.6.0",
    "babel-preset-react": "^6.5.0",
    "cross-env": "^3.1.4",
    "draft-js": "^0.8.1",
    "eslint": "3.12.0",
    "eslint-config-hubspot": "^7.0.0",
    "eslint-config-prettier": "^2.2.0",
    "eslint-plugin-react": "6.8.0",
    "jasmine": "^2.2.0",
    "jest": "^18.1.0",
    "karma": "^0.13.22",
    "karma-chrome-launcher": "^0.2.3",
    "karma-jasmine": "^0.3.8",
    "karma-webpack": "^1.7.0",
    "prettier": "^1.8.2",
    "react": "^15.4.2",
    "react-dom": "^15.4.2",
    "rimraf": "2.5.4",
    "webpack": "^1.13.0"
  },
  "directories": {},
  "dist": {
    "shasum": "b8817000eaf251e95583c987adda085d67254a0d",
    "tarball": "https://registry.npmjs.org/draft-convert/-/draft-convert-2.1.4.tgz",
    "fileCount": 24,
    "unpackedSize": 160609
  },
  "files": [
    "dist",
    "lib"
  ],
  "gitHead": "f842b59bf8bb84df84c54be824fbec28a5c592ea",
  "homepage": "https://github.com/HubSpot/draft-convert#readme",
  "jest": {
    "testRegex": "/test/spec/.*\\.js$"
  },
  "keywords": [
    "draft",
    "draftjs",
    "draft-convert",
    "convert"
  ],
  "license": "Apache-2.0",
  "main": "lib/index.js",
  "maintainers": [
    {
      "name": "bbriggs",
      "email": "ben.s.briggs@gmail.com"
    },
    {
      "name": "hs",
      "email": "devteam@hubspot.com"
    }
  ],
  "name": "draft-convert",
  "optionalDependencies": {},
  "peerDependencies": {
    "draft-js": ">=0.7.0",
    "react": "^15.0.2|| ^16.0.0-rc || ^16.0.0",
    "react-dom": "^15.0.2|| ^16.0.0-rc || ^16.0.0"
  },
  "readme": "# **draft-convert**\n\n[![npm version](https://badge.fury.io/js/draft-convert.svg)](https://www.npmjs.com/package/draft-convert) [![License](https://img.shields.io/badge/License-Apache%202.0-blue.svg)](https://opensource.org/licenses/Apache-2.0)\n\n*Extensibly serialize & deserialize [**Draft.js**](http://draftjs.org/) content with HTML*\n\n*See [**draft-extend**](http://github.com/HubSpot/draft-extend) for more on how to use draft-convert with plugins*\n\n## Installation\n\n`npm install draft-convert --save` or `yarn add draft-convert`\n\nJump to:\n\n- [convertToHTML](#converttohtml)\n- [convertFromHTML](#convertfromhtml)\n- [Middleware functions](#middleware-functions)\n\n## convertToHTML\n\n**Extensibly serialize Draft.js [`ContentState`](http://facebook.github.io/draft-js/docs/api-reference-content-state.html#content) to HTML.**\n\n**Basic usage:**\n```javascript\nconst html = convertToHTML(editorState.getCurrentContent());\n```\n**Advanced usage:**\n```javascript\n// convert to HTML with blue text, paragraphs, and links\nconst html = convertToHTML({\n  styleToHTML: (style) => {\n    if (style === 'BOLD') {\n      return <span style={{color: 'blue'}} />;\n    }\n  },\n  blockToHTML: (block) => {\n    if (block.type === 'PARAGRAPH') {\n      return <p />;\n    }\n  },\n  entityToHTML: (entity, originalText) => {\n    if (entity.type === 'LINK') {\n      return <a href={entity.data.url}>{originalText}</a>;\n    }\n    return originalText;\n  }\n})(editorState.getCurrentContent());\n\n// convert content state to HTML with functionality defined in the plugins applied\nconst html = compose(\n    FirstPlugin,\n    SecondPlugin,\n    ThirdPlugin\n)(convertToHTML)(editorState.getCurrentContent());\n```\n\n\n`styleToHTML`, `blockToHtml`, and `entityToHTML` are functions that take Draft content data and may return a `ReactElement` or an object of shape `{start, end}`  defining strings for the beginning and end tags of the style, block, or entity. `entityToHTML` may return either a string with or without HTML if the use case demands it. `blockToHTML` also may return an optional `empty` property to handle alternative behavior for empty blocks. To use this along with a `ReactElement` return value an object of shape `{element: ReactElement, empty: ReactElement}` may be returned. If no additional functionality is necessary `convertToHTML` can be invoked with just a `ContentState` to serialize using just the default Draft functionality. `convertToHTML` can be passed as an argument to a plugin to modularly augment its functionality.\n\n**Legacy alternative conversion options**\n`styleToHTML` and `blockToHTML` options may be plain objects keyed by style or block type with values of `ReactElement` s or `{start, end}`  objects. These objects will eventually be removed in favor of the functions described above.\n\n**Type info:**\n```javascript\ntype ContentStateConverter = (contentState: ContentState) => string\n\ntype Tag =\n  ReactElement |\n  {start: string, end: string, empty?: string} |\n  {element: ReactElement, empty?: ReactElement}\n\ntype RawEntity = {\n    type: string,\n    mutability: DraftEntityMutability,\n    data: Object\n}\n\ntype RawBlock = {\n    type: string,\n    depth: number,\n    data?: object,\n    text: string\n}\n\ntype convertToHTML = ContentStateConverter | ({\n    styleToHTML?: (style: string) => Tag,\n    blockToHTML?: (block: RawBlock) => Tag),\n    entityToHTML?: (entity: RawEntity, originalText: string) => Tag | string\n}) => ContentStateConverter\n```\n\n## convertFromHTML\n\n**Extensibly deserialize HTML to Draft.js [`ContentState`](http://facebook.github.io/draft-js/docs/api-reference-content-state.html#content).**\n\n**Basic usage:**\n```javascript\nconst editorState = EditorState.createWithContent(convertFromHTML(html));\n```\n\n**Advanced usage:**\n```javascript\n// convert HTML to ContentState with blue text, links, and at-mentions\nconst contentState = convertFromHTML({\n    htmlToStyle: (nodeName, node, currentStyle) => {\n        if (nodeName === 'span' && node.style.color === 'blue') {\n            return currentStyle.add('BLUE');\n        } else {\n            return currentStyle;\n        }\n    },\n    htmlToEntity: (nodeName, node, createEntity) => {\n        if (nodeName === 'a') {\n            return createEntity(\n                'LINK',\n                'MUTABLE',\n                {url: node.href}\n            )\n        }\n    },\n    textToEntity: (text, createEntity) => {\n        const result = [];\n        text.replace(/\\@(\\w+)/g, (match, name, offset) => {\n            const entityKey = createEntity(\n                'AT-MENTION',\n                'IMMUTABLE',\n                {name}\n            );\n            result.push({\n                entity: entityKey,\n                offset,\n                length: match.length,\n                result: match\n            });\n        });\n        return result;\n    },\n    htmlToBlock: (nodeName, node) => {\n        if (nodeName === 'blockquote') {\n            return {\n                type: 'blockquote',\n                data: {}\n            };\n        }\n    }\n})(html);\n\n// convert HTML to ContentState with functionality defined in the draft-extend plugins applied\nconst fromHTML = compose(\n    FirstPlugin,\n    SecondPlugin,\n    ThirdPlugin\n)(convertFromHTML);\nconst contentState = fromHTML(html);\n```\n\nIf no additional functionality is necessary `convertToHTML` can be invoked with just an HTML string to deserialize using just the default Draft functionality. Any `convertFromHTML` can be passed as an argument to a plugin to modularly augment its functionality. A `flat` option may be provided to force nested block elements to split into flat, separate blocks. For example, the HTML input `<p>line one<br />linetwo</p>` will produce two `unstyled` blocks in `flat` mode.\n\n**Type info:**\n```javascript\ntype HTMLConverter = (html: string, {flat: ?boolean}, DOMBuilder: ?Function, generateKey: ?Function) => ContentState\n\ntype EntityKey = string\n\ntype convertFromHTML = HTMLConverter | ({\n    htmlToStyle: ?(nodeName: string, node: Node) => DraftInlineStyle,\n    htmlToBlock: ?(nodeName: string, node: Node) => ?(DraftBlockType | {type: DraftBlockType, data: object} | false),\n    htmlToEntity: ?(\n        nodeName: string,\n        node: Node,\n        createEntity: (type: string, mutability: string, data: object) => EntityKey,\n        getEntity: (key: EntityKey) => Entity,\n        mergeEntityData: (key: string, data: object) => void,\n        replaceEntityData: (key: string, data: object) => void\n    ): ?EntityKey,\n    textToEntity: ?(\n        text: string,\n        createEntity: (type: string, mutability: string, data: object) => EntityKey,\n        getEntity: (key: EntityKey) => Entity,\n        mergeEntityData: (key: string, data: object) => void,\n        replaceEntityData: (key: string, data: object) => void\n    ) => Array<{entity: EntityKey, offset: number, length: number, result: ?string}>\n}) => HTMLConverter\n```\n\n## Middleware functions\n\nAny conversion option for `convertToHTML`  or `convertFromHTML` may also accept a middleware function of shape `(next) => (…args) => result` , where `…args` are the normal configuration function paramaters and `result` is the expected return type for that function. These functions can transform results of the default conversion included in `convertToHTML` or `convertFromHTML` by leveraging the result of `next(...args)`. These middleware functions are most useful when passed as the result of composition of [`draft-extend`](http://github.com/HubSpot/draft-extend) plugins. If you choose to use them independently, a `__isMiddleware` property must be set to `true` on the function for `draft-convert` to properly handle it.\n\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/HubSpot/draft-convert.git"
  },
  "scripts": {
    "build": "npm run build:commonjs && npm run build:umd && npm run build:umd:min",
    "build-and-test": "npm run clean && npm run build && npm run test-once",
    "build:commonjs": "cross-env BABEL_ENV=commonjs babel src --out-dir lib",
    "build:umd": "webpack --config webpack.config.development.js ./src/index.js ./dist/draft-convert.js",
    "build:umd:min": "webpack --config webpack.config.production.js ./src/index.js ./dist/draft-convert.min.js",
    "clean": "rimraf ./dist && rimraf ./lib",
    "jest": "jest",
    "jest:debug": "node --debug-brk --inspect ./node_modules/.bin/jest -i",
    "jest:watch": "jest --watch",
    "lint": "eslint src/ test/",
    "prepare": "npm run build-and-test",
    "prepublish": "npm run lint && npm run build-and-test",
    "prettier:write": "prettier --write ./{src,test}/*.js ./{src,test}/**/*.js",
    "test": "npm run jest",
    "test-once": "npm run jest",
    "test-once:karma": "karma start test/karma.config.js --single-run",
    "test:karma": "karma start test/karma.config.js"
  },
  "version": "2.1.4"
}
